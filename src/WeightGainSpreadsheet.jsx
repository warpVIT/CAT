import React, { useState, useEffect } from "react";
import Dashboard from "./components/Dashboard";
import WeightTracker from "./components/WeightTracker";
import MealPlan from "./components/MealPlan";
import Products from "./components/Products";
import Recipes from "./components/Recipes";
import Habits from "./components/Habits";
import CatChat from "./components/CatChat"; // –ò–º–ø–æ—Ä—Ç CatChat

const WeightGainSpreadsheet = () => {
  const [activeTab, setActiveTab] = useState("dashboard");
  const [saveNotification, setSaveNotification] = useState(false);
  const [saveTimeout, setSaveTimeout] = useState(null);
  const [isLoaded, setIsLoaded] = useState(false);

  const [data, setData] = useState({
    weightData: [],
    mealPlanData: {},
    habitData: [],
    dislikedFoods: ["–û–ª–∏–≤–∫–∏"],
    targetWeight: 60,
    startWeight: 46.2,
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö + –∞–≤—Ç–æ-—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const updateData = (newData) => {
    setData((prevData) => {
      const updatedData = { ...prevData, ...newData };
      localStorage.setItem("weightGainData", JSON.stringify(updatedData));
      return updatedData;
    });
    triggerSaveNotification();
  };

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
  const triggerSaveNotification = () => {
    if (saveTimeout) clearTimeout(saveTimeout);
    const timeout = setTimeout(() => {
      setSaveNotification(true);
      setTimeout(() => setSaveNotification(false), 1500);
    }, 500);
    setSaveTimeout(timeout);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
  useEffect(() => {
    const loadData = () => {
      const savedData = localStorage.getItem("weightGainData");
      if (savedData) {
        try {
          const parsedData = JSON.parse(savedData);

          // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
          if (Array.isArray(parsedData.mealPlanData)) {
            parsedData.mealPlanData = {
              0: parsedData.mealPlanData,
              1: [], 2: [], 3: [], 4: [], 5: [], 6: [],
            };
          }

          if (!parsedData.targetWeight) parsedData.targetWeight = 60;
          if (!parsedData.startWeight) {
            parsedData.startWeight = parsedData.weightData.length > 0
              ? parsedData.weightData[0].weight
              : 46.2;
          }

          setData(parsedData);
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
        }
      }
      setIsLoaded(true);
    };

    loadData();
  }, []);

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–±–∞
  const TabButton = ({ id, label, icon }) => (
    <button
      className={`flex items-center px-4 py-2 rounded-t-lg border-b-2 ${
        activeTab === id
          ? "bg-purple-100 border-purple-400 text-purple-700 font-semibold"
          : "bg-gray-100 border-gray-300 text-gray-600 hover:bg-purple-50"
      }`}
      onClick={() => setActiveTab(id)}
    >
      <span className="mr-1">{icon}</span>
      {label}
    </button>
  );

  // –¢–∞–±-–ø–∞–Ω–µ–ª—å
  const renderTabs = () => (
    <div className="flex space-x-1 mb-4 border-b border-gray-200">
      <TabButton id="dashboard" label="–î–∞—à–±–æ—Ä–¥" icon="üìä" />
      <TabButton id="weight-tracker" label="–¢—Ä–µ–∫–µ—Ä –≤–µ—Å–∞" icon="‚öñÔ∏è" />
      <TabButton id="meal-plan" label="–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è" icon="üçΩÔ∏è" />
      <TabButton id="products" label="–ü—Ä–æ–¥—É–∫—Ç—ã" icon="ü•ë" />
      <TabButton id="recipes" label="–†–µ—Ü–µ–ø—Ç—ã" icon="üç≤" />
      <TabButton id="habits" label="–ü—Ä–∏–≤—ã—á–∫–∏" icon="üìù" />
      <TabButton id="catchat" label="–ö–æ—à–∞—á–∏–π –ò–ò" icon="üò∫" />
    </div>
  );

  // –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ
  const renderActiveTab = () => {
    if (!isLoaded) return null;

    switch (activeTab) {
      case "dashboard":
        return (
          <Dashboard
            data={data}
            updateData={updateData}
            setActiveTab={setActiveTab}
          />
        );
      case "weight-tracker":
        return <WeightTracker data={data} updateData={updateData} />;
      case "meal-plan":
        return <MealPlan data={data} updateData={updateData} />;
      case "products":
        return <Products data={data} updateData={updateData} />;
      case "recipes":
        return <Recipes data={data} updateData={updateData} />; {/* –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–ø—Å—ã */}
      case "habits":
        return <Habits data={data} updateData={updateData} />;
      case "catchat":
        return <CatChat data={data} updateData={updateData} />; {/* –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–ø—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ */}
      default:
        return (
          <Dashboard
            data={data}
            updateData={updateData}
            setActiveTab={setActiveTab}
          />
        );
    }
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const SaveNotification = () => (
    <div
      className={`fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg transform transition-transform ${
        saveNotification
          ? "translate-y-0 opacity-100"
          : "translate-y-10 opacity-0"
      }`}
    >
      <div className="flex items-center">
        <span className="mr-2">‚úÖ</span>
        <span>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</span>
      </div>
    </div>
  );

  return (
    <div className="bg-purple-50 p-4 font-sans">
      {renderTabs()}
      {renderActiveTab()}
      <div className="mt-8 text-center text-sm text-purple-500">
        <p>"–ú–æ–π –ø—É—Ç—å –∫ —Å–∏–ª–µ, –±–∞–ª–∞–Ω—Å—É –∏ +60 –∫–≥" üí™üê±</p>
      </div>
      <SaveNotification />
    </div>
  );
};

export default WeightGainSpreadsheet;