import React, { useState, useEffect } from "react";
import Section from "./common/Section";

const WeightTracker = ({ data, updateData }) => {
  const { weightData, mealPlanData } = data;
  const [newWeightInput, setNewWeightInput] = useState("");
  const [newProteinInput, setNewProteinInput] = useState("");
  const [newFatInput, setNewFatInput] = useState("");
  const [newCarbsInput, setNewCarbsInput] = useState("");
  const [newCaloriesInput, setNewCaloriesInput] = useState("");

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const savedWeightData = localStorage.getItem("weightData");
    if (savedWeightData && weightData.length === 0) {
      try {
        const parsedData = JSON.parse(savedWeightData);
        updateData({ weightData: parsedData });
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:", error);
      }
    }
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ë–ñ–£ –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é
  const calculateWeeklyNutrients = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mealPlanData —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
    if (!mealPlanData || typeof mealPlanData !== 'object') {
      return { calories: 0, protein: 0, fat: 0, carbs: 0 };
    }

    // –°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ –≤—Å–µ—Ö –¥–Ω–µ–π
    let totalProtein = 0;
    let totalFat = 0;
    let totalCarbs = 0;
    let totalCalories = 0;

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–Ω—è–º (–∫–ª—é—á–∏ 0-6)
    for (let dayIndex = 0; dayIndex < 7; dayIndex++) {
      if (mealPlanData[dayIndex] && Array.isArray(mealPlanData[dayIndex])) {
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        mealPlanData[dayIndex].forEach(meal => {
          // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ (—Å—Ç–∞—Ç—É—Å "completed")
          if (meal.status === "completed") {
            totalProtein += meal.protein || 0;
            totalFat += meal.fat || 0;
            totalCarbs += meal.carbs || 0;
            totalCalories += meal.calories || 0;
          }
        });
      }
    }

    return {
      calories: totalCalories,
      protein: totalProtein,
      fat: totalFat,
      carbs: totalCarbs,
    };
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å–∏ –æ –≤–µ—Å–µ, —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á–µ—Ç–æ–º –ë–ñ–£ –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
  const addNewWeightEntry = () => {
    if (newWeightInput && !isNaN(newWeightInput)) {
      const weight = parseFloat(newWeightInput);

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏—Ä–æ—Å—Ç–∞
      let gain = 0;
      if (weightData.length > 0) {
        const lastEntry = weightData[weightData.length - 1];
        gain = weight - lastEntry.weight;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      let cats = "";
      if (weight > 49.5) cats = "üò∫üò∫üò∫";
      else if (weight > 48.0) cats = "üò∫üò∫";
      else cats = "üò∫";

      // –ü–æ–ª—É—á–∞–µ–º –ë–ñ–£ –∏–∑ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è
      const nutrients = calculateWeeklyNutrients();

      const newEntry = {
        week:
          weightData.length > 0
            ? weightData[weightData.length - 1].week + 1
            : 1,
        weight: weight,
        gain: parseFloat(gain.toFixed(1)),
        calories: parseInt(newCaloriesInput) || nutrients.calories || 2200,
        protein: parseInt(newProteinInput) || nutrients.protein || 85,
        fat: parseInt(newFatInput) || nutrients.fat || 70,
        carbs: parseInt(newCarbsInput) || nutrients.carbs || 275,
        cat: cats,
      };

      const updatedData = [...weightData, newEntry];

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      localStorage.setItem("weightData", JSON.stringify(updatedData));
      updateData({ weightData: updatedData });

      // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
      setNewWeightInput("");
      setNewProteinInput("");
      setNewFatInput("");
      setNewCarbsInput("");
      setNewCaloriesInput("");
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –≤–µ—Å–µ
  const removeWeightEntry = (week) => {
    const updatedData = weightData.filter((entry) => entry.week !== week);
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä–∞ –Ω–µ–¥–µ–ª—å
    const recalculatedData = updatedData.map((entry, index) => ({
      ...entry,
      week: index + 1,
    }));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    localStorage.setItem("weightData", JSON.stringify(recalculatedData));
    updateData({ weightData: recalculatedData });
  };

  // –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞ —Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏
  const renderWeightChart = () => {
    if (weightData.length < 2) {
      return (
        <div className="h-48 flex items-center justify-center bg-gray-100 rounded-lg">
          <div className="text-gray-400 italic text-sm">
            –î–æ–±–∞–≤—å—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Å–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫
          </div>
        </div>
      );
    }

    const maxWeight = Math.max(...weightData.map((d) => d.weight)) + 0.5;
    const minWeight = Math.min(...weightData.map((d) => d.weight)) - 0.5;
    const range = maxWeight - minWeight;

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ —Å–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏
    return (
      <div className="h-48 bg-white rounded-lg p-4 relative">
        {/* –§–æ–Ω –≥—Ä–∞—Ñ–∏–∫–∞ */}
        <div className="absolute inset-0 p-4">
          {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ */}
          {[0, 25, 50, 75, 100].map((percent) => (
            <div
              key={percent}
              className="absolute w-full h-px bg-gray-200"
              style={{ top: `${percent}%` }}
            />
          ))}
        </div>

        {/* –ì—Ä–∞—Ñ–∏–∫ */}
        <div className="absolute left-12 right-4 top-4 bottom-8">
          <svg
            className="w-full h-full"
            viewBox={`0 0 ${weightData.length - 1} 1`}
            preserveAspectRatio="none"
          >
            <path
              d={`M0,${
                1 - (weightData[0].weight - minWeight) / range
              } ${weightData
                .slice(1)
                .map(
                  (entry, index) =>
                    `C${index + 0.5},${
                      1 - (weightData[index].weight - minWeight) / range
                    } ${index + 0.5},${
                      1 - (entry.weight - minWeight) / range
                    } ${index + 1},${1 - (entry.weight - minWeight) / range}`
                )
                .join(" ")}`}
              fill="none"
              stroke="#c084fc"
              strokeWidth="0.02"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            {weightData.map((entry, index) => (
              <circle
                key={index}
                cx={index}
                cy={1 - (entry.weight - minWeight) / range}
                r="0.03"
                fill="#9c64a6"
                stroke="#ffffff"
                strokeWidth="0.01"
              />
            ))}
          </svg>
        </div>

        {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ—Å—å */}
        <div className="absolute left-0 top-4 bottom-8 w-12 flex flex-col justify-between text-xs text-gray-500">
          <span>{maxWeight.toFixed(1)}</span>
          <span>{((maxWeight + minWeight) / 2).toFixed(1)}</span>
          <span>{minWeight.toFixed(1)}</span>
        </div>

        {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Å—å */}
        <div className="absolute left-12 right-4 bottom-0 h-8 flex justify-between text-xs text-gray-500">
          {weightData.map((entry, index) => (
            <div key={index} className="flex flex-col items-center">
              <span>{entry.week}</span>
            </div>
          ))}
        </div>
      </div>
    );
  };

  return (
    <div>
      <div className="mb-6">
        <h2 className="text-xl font-bold text-purple-600 mb-4">
          K–û–®–ê–ß–ò–ô –¢–†–ï–ö–ï–† –í–ï–°–ê
        </h2>

        <div className="bg-white rounded-lg shadow-md overflow-hidden">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-purple-100">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">
                  –ù–µ–¥–µ–ª—è
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">
                  –í–µ—Å(–∫–≥)
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">
                  –ü—Ä–∏—Ä–æ—Å—Ç
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">
                  –ö–∞–ª–ª–æ—Ä–∏–∏
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">
                  –ë–µ–ª–∫–∏ (–≥)
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">
                  –ñ–∏—Ä—ã (–≥)
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">
                  –£–≥–ª–µ–≤–æ–¥—ã (–≥)
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">
                  –ö–æ—Ç–∏–∫
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">
                  –î–µ–π—Å—Ç–≤–∏—è
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {weightData.map((row) => (
                <tr
                  key={row.week}
                  className={row.week % 2 === 0 ? "bg-pink-50" : "bg-purple-50"}
                >
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                    –ù–µ–¥ {row.week}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                    {row.weight}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-green-600">
                    {row.gain > 0 ? "+" + row.gain : row.gain}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                    {row.calories}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                    {row.protein}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                    {row.fat}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                    {row.carbs}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                    {row.cat}
                  </td>
                  <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-700">
                    <button
                      className="text-red-500 hover:text-red-700"
                      onClick={() => removeWeightEntry(row.week)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </td>
                </tr>
              ))}
              <tr className="bg-gray-100">
                <td className="px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
                  –ù–µ–¥ {weightData.length > 0 ? weightData.length + 1 : 1}
                </td>
                <td className="px-4 py-3 whitespace-nowrap">
                  <input
                    type="number"
                    step="0.1"
                    placeholder="–í–µ—Å"
                    className="border rounded px-2 py-1 w-full text-sm"
                    value={newWeightInput}
                    onChange={(e) => setNewWeightInput(e.target.value)}
                  />
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                  –ê–≤—Ç–æ
                </td>
                <td className="px-4 py-3 whitespace-nowrap">
                  <input
                    type="number"
                    placeholder="–ö–∞–ª–æ—Ä–∏–∏"
                    className="border rounded px-2 py-1 w-full text-sm"
                    value={newCaloriesInput}
                    onChange={(e) => setNewCaloriesInput(e.target.value)}
                  />
                </td>
                <td className="px-4 py-3 whitespace-nowrap">
                  <input
                    type="number"
                    placeholder="–ë–µ–ª–∫–∏"
                    className="border rounded px-2 py-1 w-full text-sm"
                    value={newProteinInput}
                    onChange={(e) => setNewProteinInput(e.target.value)}
                  />
                </td>
                <td className="px-4 py-3 whitespace-nowrap">
                  <input
                    type="number"
                    placeholder="–ñ–∏—Ä—ã"
                    className="border rounded px-2 py-1 w-full text-sm"
                    value={newFatInput}
                    onChange={(e) => setNewFatInput(e.target.value)}
                  />
                </td>
                <td className="px-4 py-3 whitespace-nowrap">
                  <input
                    type="number"
                    placeholder="–£–≥–ª–µ–≤–æ–¥—ã"
                    className="border rounded px-2 py-1 w-full text-sm"
                    value={newCarbsInput}
                    onChange={(e) => setNewCarbsInput(e.target.value)}
                  />
                </td>
                <td className="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
                  –ê–≤—Ç–æ
                </td>
                <td className="px-4 py-3 whitespace-nowrap">
                  <button
                    className="bg-purple-500 text-white px-3 py-1 rounded text-xs"
                    onClick={addNewWeightEntry}
                  >
                    –î–æ–±–∞–≤–∏—Ç—å
                  </button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Section title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞" icon="üìä">
          {renderWeightChart()}
        </Section>

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ */}
        {weightData.length > 0 && (
          <Section title="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è" icon="üèÜ">
            <div className="grid grid-cols-2 gap-4">
              <div className="bg-pink-50 p-3 rounded-lg flex items-center">
                <span className="text-xl mr-2">üî•</span>
                <div>
                  <div className="text-sm font-medium text-pink-700">
                    –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç
                  </div>
                  <div className="text-xs text-gray-600">
                    {weightData.length} –∏–∑–º–µ—Ä–µ–Ω–∏–π
                  </div>
                </div>
              </div>
              {weightData.filter((d) => d.protein >= 95).length > 0 && (
                <div className="bg-purple-50 p-3 rounded-lg flex items-center">
                  <span className="text-xl mr-2">ü•Ñ</span>
                  <div>
                    <div className="text-sm font-medium text-purple-700">
                      –ë–µ–ª–∫–æ–≤–∞—è –∫–æ—Ä–æ–ª–µ–≤–∞
                    </div>
                    <div className="text-xs text-gray-600">
                      {weightData.filter((d) => d.protein >= 95).length} –¥–Ω–µ–π
                      &gt; 95–≥ –±–µ–ª–∫–∞
                    </div>
                  </div>
                </div>
              )}
              {weightData.length > 1 && (
                <div className="bg-pink-50 p-3 rounded-lg flex items-center">
                  <span className="text-xl mr-2">‚ö°</span>
                  <div>
                    <div className="text-sm font-medium text-pink-700">
                      –†–µ–∫–æ—Ä–¥–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç
                    </div>
                    <div className="text-xs text-gray-600">
                      +
                      {Math.max(
                        ...weightData
                          .map((d) => (d.gain > 0 ? d.gain : 0))
                          .filter(Boolean)
                      ).toFixed(1)}{" "}
                      –∫–≥ –∑–∞ –Ω–µ–¥–µ–ª—é
                    </div>
                  </div>
                </div>
              )}
            </div>
          </Section>
        )}
      </div>
    </div>
  );
};

export default WeightTracker;